version: '3'

services:  
  db:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db
    restart: unless-stopped
    ports:
      - "5432:5432"
  web:
    build: .
    command: python3.7 manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      - db
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    hostname: default-rabbit
    env_file:
      - ./local.env      
    ports:
      - 5672:5672
      - 15672:15672
      
    # Run this container on a private network for this application.
    # This is necessary for magic Docker DNS to work: other containers
    # also running on this network will see a host name "rabbitmq"
    # (the name of this section) and the internal port 5672, even though
    # that's not explicitly published above.
    networks:
      - network

  # consumer:
  #   # If needed, Docker Compose will automatically run consumer/Dockerfile.
  #   build: consumer

  #   # Environment variables:
  #   environment:
  #     # The location of the RabbitMQ server.  "amqp" is the protocol;
  #     # "rabbitmq" is the hostname.  Note that there is not a guarantee
  #     # that the server will start first!  Telling the pika client library
  #     # to try multiple times gets around this ordering issue.
  #     AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'

  #   # Again, run on the private network.  Needed to see the "rabbitmq"
  #   # magic Docker DNS name.
  #   networks:
  #     - network

  # publisher:
  #   # Identical to the consumer.
  #   build: publisher
  #   environment:
  #     AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
  #   networks:
  #     - network

networks:
  # Declare our private network.  We must declare one for the magic
  # Docker DNS to work, but otherwise its default settings are fine.
  network: {}
